#!/usr/bin/python3
"""This does serialization and deserialiazation"""
import json
import os


class FileStorage:
    """File storage class for storing instances of a dictionary through json"""

    __file_path = "file.json"
    __objects = {}

    def all(self):
        """all method to return dictionary of the class attribute"""

        return self.__objects

    def new(self, obj):
        """this method sets in the private object obj as the object and the key"""

        self_f = self.__objects
        stringg = "{}.{}".format(type(obj).__name__, obj.id)
        self_f = {stringg: obj.to_dict()}
        self.__objects = self_f

    def save(self):
        """serializes the object which is a dictionary"""

        with open(FileStorage.__file_path, "w", encoding="utf-8") as file1:
            jstr = json.dumps(self.__objects)
            file1.write(jstr)

    def reload(self):
        """reload method to ressurate the object intstance dictionary"""

        if os.path.exists(FileStorage.__file_path):
            with open(FileStorage.__file_path, "r", encoding="utf-8") as file1:
                txt = file1.read()
                json_conv = json.loads(txt)
                for key, value in obj_dict.items():
                    class_name, obj_id = key.split('.')
                    cls = eval(class_name)
                    self.__objects[key] = cls(**value)
